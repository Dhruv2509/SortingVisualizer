{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","merge","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","getQuickSortAnimations","quickSort","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","swapped","bubbleSort","window","innerWidth","WINDOW_HEIGHT","innerHeight","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","onClick","id","src","speed","loop","autoplay","React","Component","App","ReactDOM","render"],"mappings":"oQAAO,SAASA,EAAuBC,GACnC,IAAIC,EAAc,GACdC,EAAiBF,EAAMG,SAQ/B,SAASC,EAAUF,EAAgBG,EAAYC,EAAUL,GACrD,GAAGI,IAAeC,EACd,OACJ,IAAMC,EAAcC,KAAKC,OAAOJ,EAAaC,GAAU,GACvDF,EAAUF,EAAgBG,EAAYE,EAAaN,GACnDG,EAAUF,EAAgBK,EAAc,EAAGD,EAAUL,IAIzD,SAAeC,EAAgBG,EAAYE,EAAaD,EAAUL,GAC9D,IAAIS,EAAY,GACZC,EAAIN,EACJO,EAAIL,EAAc,EACtB,KAAMI,GAAKJ,GAAeK,GAAKN,GAE3BL,EAAWY,KAAK,CAAC,eAAgBF,EAAGC,IAEpCX,EAAWY,KAAK,CAAC,eAAgBF,EAAGC,IACjCV,EAAeS,IAAMT,EAAeU,GACnCF,EAAUG,KAAKX,EAAeS,MAG9BD,EAAUG,KAAKX,EAAeU,MAGtC,KAAMD,GAAKJ,GACPN,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,IACpCV,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,IACpCD,EAAUG,KAAKX,EAAeS,MAElC,KAAMC,GAAKN,GACPL,EAAWY,KAAK,CAAC,eAAgBD,EAAGA,IACpCX,EAAWY,KAAK,CAAC,eAAgBD,EAAGA,IACpCF,EAAUG,KAAKX,EAAeU,MAElC,IAAK,IAAID,EAAIN,EAAYM,GAAKL,EAAUK,IACpCV,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,EAAIN,IACxCJ,EAAWY,KAAK,CAAC,YAAaF,EAAGD,EAAUC,EAAIN,KAC/CJ,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,EAAIN,IACxCH,EAAeS,GAAKD,EAAUC,EAAIN,GAjCtCS,CAAMZ,EAAgBG,EAAYE,EAAaD,EAAUL,GAbzDG,CAAUF,EAAgB,EAAGA,EAAea,OAAS,EAAGd,GACxD,IAAMe,EAAwBhB,EAAMG,QAAQc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAgDZ,SAAwBC,EAAYC,GAChC,GAAID,EAAWP,SAAWQ,EAAYR,OAClC,OAAO,EAEX,IAAK,IAAIJ,EAAI,EAAGA,EAAIW,EAAWP,OAAQJ,IACrC,GAAIW,EAAWX,KAAOY,EAAYZ,GAChC,OAAO,EAGX,OAAO,EAzDKa,CAAeR,EAAuBd,IAE3C,CAACD,EADRD,EAAQE,GCNL,SAASuB,EAAuBzB,GACnC,IAAIC,EAAc,GACdC,EAAiBF,EAAMG,SAQ/B,SAASuB,EAAUxB,EAAgBG,EAAYC,EAAUL,GACrD,IAAI0B,EACAtB,EAAaC,IACbqB,EAMR,SAAwBzB,EAAgBG,EAAYC,EAAUL,GAG1D,IAFA,IAAI2B,EAAO1B,EAAeI,GACtBK,EAAEN,EAAW,EACTO,EAAIP,EAAYO,EAAIN,IAAYM,EACpCX,EAAWY,KAAK,CAAC,eAAgBD,EAAGN,IACpCL,EAAWY,KAAK,CAAC,eAAgBD,EAAGN,IACjCJ,EAAeU,IAAMgB,IACpB3B,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,EAAE,IACtCV,EAAWY,KAAK,CAAC,OAAQD,EAAGV,EAAeS,EAAE,KAC7CV,EAAWY,KAAK,CAAC,OAAQF,EAAE,EAAGT,EAAeU,KAC7CX,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,EAAE,IAEtCkB,EAAK3B,EAAgBU,IADrBD,IAUR,OANAV,EAAWY,KAAK,CAAC,eAAgBF,EAAE,EAAGL,IACtCL,EAAWY,KAAK,CAAC,OAAQP,EAAUJ,EAAeS,EAAE,KACpDV,EAAWY,KAAK,CAAC,OAAQF,EAAE,EAAGT,EAAeI,KAC7CL,EAAWY,KAAK,CAAC,eAAgBF,EAAE,EAAGL,IAEtCuB,EAAK3B,EAAgBS,EAAE,EAAGL,GACnBK,EAAE,EA3BQmB,CAAe5B,EAAgBG,EAAYC,EAAUL,GAClEyB,EAAUxB,EAAgBG,EAAYsB,EAAa,EAAG1B,GACtDyB,EAAUxB,EAAgByB,EAAa,EAAGrB,EAAUL,IAZxDyB,CAAUxB,EAAgB,EAAGA,EAAea,OAAS,EAAGd,GACxD,IAAMe,EAAwBhB,EAAMG,QAAQc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBA4ChB,SAAwBC,EAAYC,GAChC,GAAID,EAAWP,SAAWQ,EAAYR,OAClC,OAAO,EAEX,IAAK,IAAIJ,EAAI,EAAGA,EAAIW,EAAWP,OAAQJ,IACrC,GAAIW,EAAWX,KAAOY,EAAYZ,GAChC,OAAO,EAGX,OAAO,EArD8Ba,CAAeR,EAAuBd,IAEpE,CAACD,EADRD,EAAQE,GAqCZ,SAAS2B,EAAK3B,EAAgB6B,EAAYC,GACtC,IAAIC,EAAO/B,EAAe6B,GAC1B7B,EAAe6B,GAAc7B,EAAe8B,GAC5C9B,EAAe8B,GAAeC,EC9C3B,SAASC,EAA2BlC,GACvC,IAAIC,EAAc,GACdC,EAAiBF,EAAMG,SAQ/B,SAAuBD,EAAgBD,GAEnC,IADA,IAAMkC,EAAIjC,EAAea,OAChBJ,EAAI,EAAGA,EAAIwB,EAAI,EAAGxB,IAAK,CAE5B,IADA,IAAIyB,EAAWzB,EACNC,EAAID,EAAI,EAAGC,EAAIuB,EAAGvB,IACvBX,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,IACpCV,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,IAChCT,EAAeU,GAAKV,EAAekC,KACnCA,EAAWxB,GAGnBX,EAAWY,KAAK,CAAC,OAAQuB,EAAUlC,EAAeS,KAClDV,EAAWY,KAAK,CAAC,OAAQF,EAAGT,EAAekC,KAE3CP,EAAK3B,EAAgBkC,EAAUzB,IArBnC0B,CAAcnC,EAAgBD,GAC9B,IAAMe,EAAwBhB,EAAMG,QAAQc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBA6BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWP,SAAWQ,EAAYR,OAClC,OAAO,EAEX,IAAK,IAAIJ,EAAI,EAAGA,EAAIW,EAAWP,OAAQJ,IACrC,GAAIW,EAAWX,KAAOY,EAAYZ,GAChC,OAAO,EAGX,OAAO,EAtC8Ba,CAAeR,EAAuBd,IAEpE,CAACD,EADRD,EAAQE,GAsBZ,SAAS2B,EAAK3B,EAAgB6B,EAAYC,GACtC,IAAIC,EAAO/B,EAAe6B,GAC1B7B,EAAe6B,GAAc7B,EAAe8B,GAC5C9B,EAAe8B,GAAeC,EC/B3B,SAASK,EAAwBtC,GACpC,IAAIC,EAAc,GACdC,EAAiBF,EAAMG,SAQ/B,SAAoBD,EAAgBD,GAEhC,IADA,IAAMkC,EAAIjC,EAAea,OACjBH,EAAE,EAAEA,EAAEuB,EAAE,EAAEvB,IAAK,CAEnB,IADA,IAAI2B,GAAU,EACN5B,EAAI,EAAGA,EAAIwB,EAAEvB,EAAE,EAAGD,IACtBV,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,EAAI,IACxCV,EAAWY,KAAK,CAAC,eAAgBF,EAAGA,EAAI,IACrCT,EAAeS,GAAKT,EAAeS,EAAI,KACtC4B,GAAU,EACVtC,EAAWY,KAAK,CAAC,OAAQF,EAAGT,EAAeS,EAAI,KAC/CV,EAAWY,KAAK,CAAC,OAAQF,EAAI,EAAGT,EAAeS,KAC/CkB,EAAK3B,EAAgBS,EAAGA,EAAI,IAGpC,IAAe,IAAZ4B,EAAmB,OArB1BC,CAAWtC,EAAgBD,GAC3B,IAAMe,EAAwBhB,EAAMG,QAAQc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBA6BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWP,SAAWQ,EAAYR,OAClC,OAAO,EAEX,IAAK,IAAIJ,EAAI,EAAGA,EAAIW,EAAWP,OAAQJ,IACrC,GAAIW,EAAWX,KAAOY,EAAYZ,GAChC,OAAO,EAGX,OAAO,EAtC8Ba,CAAeR,EAAuBd,IAEpE,CAACD,EADRD,EAAQE,GAsBZ,SAAS2B,EAAK3B,EAAgB6B,EAAYC,GACtC,IAAIC,EAAO/B,EAAe6B,GAC1B7B,EAAe6B,GAAc7B,EAAe8B,GAC5C9B,EAAe8B,GAAeC,ECtBfQ,OAAOC,WAA1B,IACIC,EAAgBF,OAAOG,YAUrBC,EACK,2BADLA,EAEO,yBAoSEC,M,YAhSX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACThD,MAAO,IAHI,E,iFAOfiD,KAAKC,e,mCAKL,IADA,IAgRuBC,EAAKC,EAhRtBpD,EAAQ,GACLW,EAAI,EAAEA,EA3BI,GA2BqBA,IAGpCX,EAAMa,MA4QasC,EA5Qc,GA4QTC,EA5QYT,EAAc,IA8QnDnC,KAAKC,MAAMD,KAAK6C,UAAYD,EAAMD,EAAM,GAAKA,KA5QhDF,KAAKK,SAAS,CAACtD,MAAOA,IACtBiD,KAAKM,wB,2CAGLC,SAASC,eAAe,aAAaC,UAAW,EAChD,IAAIC,EAAcH,SAASC,eAAe,aAAaG,MACvDJ,SAASC,eAAe,aAAaI,MA9BrB,qBA+BhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MApCrB,qBAqChBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MA1CzB,qBA2ChBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAhDzB,qBAiDhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,cAAcC,UAAW,EACjDC,EAAcH,SAASC,eAAe,cAAcG,MACpDJ,SAASC,eAAe,cAAcI,MAtDtB,qBAuDhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,Y,4CAGzBP,SAASC,eAAe,aAAaC,UAAW,EAChD,IAAIC,EAAcH,SAASC,eAAe,aAAaG,MACvDJ,SAASC,eAAe,aAAaI,MAAQhB,EAC7Cc,EAAYI,WAAa,UACzBJ,EAAYG,OAAS,UAErBN,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MAAQhB,EAC7Cc,EAAYI,WAAa,UACzBJ,EAAYG,OAAS,UAErBN,SAASC,eAAe,cAAcC,UAAW,EACjDC,EAAcH,SAASC,eAAe,cAAcG,MACpDJ,SAASC,eAAe,cAAcI,MAAQhB,EAC9Cc,EAAYI,WAAa,UACzBJ,EAAYG,OAAS,UAErBN,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAAQhB,EACjDc,EAAYI,WAAa,UACzBJ,EAAYG,OAAS,UAErBN,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAAQhB,EACjDc,EAAYI,WAAa,UACzBJ,EAAYG,OAAS,Y,kCAGZ,IAAD,OACRb,KAAKe,qBADG,MAEuBjE,EAAuBkD,KAAKD,MAAMhD,OAFzD,mBAEDC,EAFC,UAGRmB,QAAQC,IAAIpB,GACZ,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAWc,OAAQJ,IAAK,CACxC,IAAMsD,EAAoC,gBAApBhE,EAAWU,GAAG,IAA4C,gBAApBV,EAAWU,GAAG,GACpEuD,EAAYV,SAASW,uBAAuB,cAC7B,IAAlBF,EAAyB,WAAD,kBACyBhE,EAAWU,GADpC,GACHyD,GADG,WACUC,EADV,KAEjBC,EAA6B,gBAApBrE,EAAWU,GAAG,GAvGrB,MADF,YAyGA4D,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAE3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IA5GvB,GA6GT3D,GATsB,GAYtB,WAAD,kBAC6CV,EAAWU,GADxD,GACqBgE,GADrB,WACgCC,EADhC,KAESL,EAAcL,EAAUS,GAAWf,MAC7Ca,YAAW,WAEPF,EAAYM,OAAZ,UAAwBD,EAAxB,QArHO,GAsHPjE,GANF,GAUV,IAAMmE,EAAeC,SA1HF,GA0H8B9E,EAAWc,OAAO,EAAI,KACvE0D,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,kCAEpC,IAAD,OACR7B,KAAKe,qBAEL,IAHQ,MAEuBvC,EAAuBwB,KAAKD,MAAMhD,OAFzD,mBAEDC,EAFC,KAGCU,GAHD,KAGK,GAAGA,EAAIV,EAAWc,OAAQJ,IAAK,CACxC,IAAMsD,EAAoC,gBAApBhE,EAAWU,GAAG,IAA4C,gBAApBV,EAAWU,GAAG,GACpEuD,EAAYV,SAASW,uBAAuB,aAClD,IAAqB,IAAlBF,GAAyB,WACxB,IAAMK,EAA6B,gBAApBrE,EAAWU,GAAG,GArIrB,MADF,YAqIiB,cAEyBV,EAAWU,GAFpC,GAEHyD,GAFG,WAEUC,EAFV,KAGjBE,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAC3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IA1IvB,GA2IT3D,GARsB,QAUvB,6CACmCV,EAAWU,GAD9C,GACYqE,GADZ,WACsBJ,EADtB,KAED,IAAkB,IAAdI,EACA,iBAEJ,IAAMC,EAAWf,EAAUc,GAAUpB,MACrCa,YAAW,WACPQ,EAASJ,OAAT,UAAqBD,EAArB,QApJO,GAqJTjE,GARD,GAGG,SAQZ,IAAMmE,EAAeC,SAxJF,GAwJ8B9E,EAAWc,OAAO,EAAI,KACvE0D,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,mCAEnC,IAAD,OACT7B,KAAKe,qBAEL,IAHS,MAEsB1B,EAAwBW,KAAKD,MAAMhD,OAFzD,mBAEFC,EAFE,KAGAU,GAHA,KAGI,GAAGA,EAAIV,EAAWc,OAAQJ,IAAK,CACxC,IAAMsD,EAAoC,gBAApBhE,EAAWU,GAAG,IAA4C,gBAApBV,EAAWU,GAAG,GACpEuD,EAAYV,SAASW,uBAAuB,aAClD,IAAqB,IAAlBF,GAAyB,WACxB,IAAMK,EAA6B,gBAApBrE,EAAWU,GAAG,GAnKrB,MADF,YAmKiB,cAEyBV,EAAWU,GAFpC,GAEHyD,GAFG,WAEUC,EAFV,KAGjBE,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAC3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IAxKvB,GAyKT3D,GARsB,QAUvB,6CACmCV,EAAWU,GAD9C,GACYqE,GADZ,WACsBJ,EADtB,KAED,IAAkB,IAAdI,EACA,iBAEJ,IAAMC,EAAWf,EAAUc,GAAUpB,MACrCa,YAAW,WACPQ,EAASJ,OAAT,UAAqBD,EAArB,QAlLO,GAmLTjE,GARD,GAGG,SASZ,IAAMmE,EAAeC,SAvLF,GAuL8B9E,EAAWc,OAAO,EAAI,KACvE0D,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,sCAEhC,IAAD,OACZ7B,KAAKe,qBAEL,IAHY,MC1Mb,SAAoChE,GACvC,IAAIC,EAAc,GACdC,EAAiBF,EAAMG,SAQ/B,SAAuBD,EAAgBD,GAEnC,IADA,IAAMkC,EAAIjC,EAAea,OAChBJ,EAAI,EAAGA,EAAIwB,EAAGxB,IAAK,CACxB,IAAIuE,EAAMhF,EAAeS,GACrBC,EAAID,EAAI,EAGZ,IAFAV,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,IACpCV,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,IAC9BC,GAAK,GAAKV,EAAeU,GAAKsE,GAChCjF,EAAWY,KAAK,CAAC,YAAaD,EAAI,EAAGV,EAAeU,KACpDV,EAAeU,EAAI,GAAKV,EAAeU,IACvCA,GAAQ,IACA,IACJX,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,IACpCV,EAAWY,KAAK,CAAC,eAAgBD,EAAGD,KAG5CV,EAAWY,KAAK,CAAC,YAAaD,EAAI,EAAGsE,IACrChF,EAAeU,EAAI,GAAKsE,GAxB5BC,CAAcjF,EAAgBD,GAC9B,IAAMe,EAAwBhB,EAAMG,QAAQc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBA0BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWP,SAAWQ,EAAYR,OAClC,OAAO,EAEX,IAAK,IAAIJ,EAAI,EAAGA,EAAIW,EAAWP,OAAQJ,IACrC,GAAIW,EAAWX,KAAOY,EAAYZ,GAChC,OAAO,EAGX,OAAO,EAnC8Ba,CAAeR,EAAuBd,IAEpE,CAACD,EADRD,EAAQE,GDsM2BkF,CAA2BnC,KAAKD,MAAMhD,OAFzD,mBAELC,EAFK,KAGHU,GAHG,KAGC,GAAGA,EAAIV,EAAWc,OAAQJ,IAAK,CACxC,IAAMsD,EAAsC,iBAArBhE,EAAWU,GAAG,IAAgD,iBAArBV,EAAWU,GAAG,GACxEuD,EAAYV,SAASW,uBAAuB,cAC7B,IAAlBF,EAAyB,WACxB,IAAMK,EAA8B,iBAArBrE,EAAWU,GAAG,GAlMrB,MADF,YAkMiB,cAEkBV,EAAWU,GAF7B,GAEVyD,GAFU,WAEGC,EAFH,KAGjBE,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAC3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IAvMvB,GAwMT3D,GARsB,GAUtB,WAAD,kBACmCV,EAAWU,GAD9C,GACYqE,GADZ,WACsBJ,EADtB,KAEKK,EAAWf,EAAUc,GAAUpB,MACrCa,YAAW,WACPQ,EAASJ,OAAT,UAAqBD,EAArB,QA9MO,GA+MTjE,GALA,GASV,IAAMmE,EAAeC,SAnNF,GAmN8B9E,EAAWc,OAAO,EAAI,KACvE0D,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,sCAEhC,IAAD,OACZ7B,KAAKe,qBAEL,IAHY,MAEmB9B,EAA2Be,KAAKD,MAAMhD,OAFzD,mBAELC,EAFK,KAGHU,GAHG,KAGC,GAAGA,EAAIV,EAAWc,OAAQJ,IAAK,CACxC,IAAMsD,EAAsC,iBAArBhE,EAAWU,GAAG,IAAgD,iBAArBV,EAAWU,GAAG,GACxEuD,EAAYV,SAASW,uBAAuB,cAC7B,IAAlBF,EAAyB,WACxB,IAAMK,EAA8B,iBAArBrE,EAAWU,GAAG,GA9NrB,MADF,YA8NiB,cAEkBV,EAAWU,GAF7B,GAEVyD,GAFU,WAEGC,EAFH,KAGjBE,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAC3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IAnOvB,GAoOT3D,GARsB,GAUtB,WAAD,kBACmCV,EAAWU,GAD9C,GACYqE,GADZ,WACsBJ,EADtB,KAEKK,EAAWf,EAAUc,GAAUpB,MACrCa,YAAW,WACPQ,EAASJ,OAAT,UAAqBD,EAArB,QA1OO,GA2OTjE,GALA,GASV,IAAMmE,EAAeC,SA/OF,GA+O8B9E,EAAWc,OAAO,EAAI,KACvE0D,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,+BAEvC,IAAD,OACC9E,EAAQiD,KAAKD,MAAMhD,MAGzB,OACI,oCACA,yBAAKqF,UAAU,kBAAkBzB,MAAO,CAAC0B,SAAS,WAAYC,MAAM,SAC/DvF,EAAMwF,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIL,UAAU,YACVH,IAAKQ,EACL9B,MAAO,CACPc,gBAhQF,YAiQEG,OAAO,GAAD,OAAKY,EAAL,aAKlB,yBAAKJ,UAAU,mBACf,yBAAKA,UAAU,uBACX,4BAAQA,UAAU,WAAWxB,MAAM,+BAAgC8B,QAAS,kBAAM,EAAKzC,eAAvF,mBAGA,4BAAQW,MAAM,2BAA2B+B,GAAK,YAAaD,QAAS,kBAAM,EAAKvF,cAA/E,cAGA,4BAAQyD,MAAM,yBAAyB+B,GAAK,YAAaD,QAAS,kBAAM,EAAKjE,cAA7E,cAGA,4BAAQmC,MAAM,yBAAyB+B,GAAK,aAAcD,QAAS,kBAAM,EAAKnD,eAA9E,eAGA,4BAAQqB,MAAM,yBAAyB+B,GAAK,gBAAiBD,QAAS,kBAAM,EAAKR,kBAAjF,kBAGA,4BAAQtB,MAAM,yBAAyB+B,GAAK,gBAAiBD,QAAS,kBAAM,EAAKtD,kBAAjF,kBAGA,yBAAKgD,UAAU,SACf,mCAAeQ,IAAI,iEAAkE9B,WAAW,cAAe+B,MAAM,IAAMC,MAAI,EAAEC,UAAQ,Y,GAhRzHC,IAAMC,W,MEbvBC,MARf,WACI,OACI,yBAAKd,UAAU,OACX,kBAAC,EAAD,QCHZe,IAASC,OACL,kBAAC,EAAD,MACA7C,SAASC,eAAe,U","file":"static/js/main.bf0dbf40.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([\"comparision1\", i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([\"comparision2\", i, j]);\r\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([\"comparision1\", i, i]);\r\n        animations.push([\"comparision2\", i, i]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([\"comparision1\", j, j]);\r\n        animations.push([\"comparision2\", j, j]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        animations.push([\"comparision1\", i, i - startIndex]);\r\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\r\n        animations.push([\"comparision2\", i, i - startIndex]);\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot= auxillaryArray[endIndex];\r\n    let i=startIndex-1;\r\n    for(let j = startIndex; j < endIndex; ++j) {\r\n        animations.push([\"comparision1\", j, endIndex]);\r\n        animations.push([\"comparision2\", j, endIndex]);\r\n        if(auxillaryArray[j] <= pivot) {\r\n            animations.push([\"comparision1\", j, i+1]);\r\n            animations.push([\"swap\", j, auxillaryArray[i+1]]);\r\n            animations.push([\"swap\", i+1, auxillaryArray[j]]);\r\n            animations.push([\"comparision2\", j, i+1]);\r\n            i++;\r\n            swap(auxillaryArray, j, i);\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", i+1, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[i+1]]);\r\n    animations.push([\"swap\", i+1, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", i+1, endIndex]);\r\n    \r\n    swap(auxillaryArray, i+1, endIndex);\r\n    return i+1;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, i]);\r\n            animations.push([\"comparision2\", j, i]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for(let j=0;j<N-1;j++) {\r\n        let swapped = false;\r\n        for(let i = 0; i < N-j-1; i++) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\r\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\r\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\r\n\r\n//Changing width,height accordingly with the browser\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet NUMBER_OF_ARRAY_BARS = 35;\r\n\r\n\r\nconst PRIMARY_COLOR = 'turquoise'; //Normal color of bars\r\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\r\nconst ANIMATION_SPEED_MS = 20; //Animation Speed (how fast color changes, how fast height gets overwritten)\r\n\r\n//Tooltips for buttons\r\nconst DISABLED_BUTTON = \"Currently Disabled\"\r\nconst ENABLED_BUTTON = {\r\n    nlogn: \"O(NlogN) Time Complexity\",\r\n    nSquare: \"O(N^2) Time Complexity\"\r\n}\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n    //Generates new random array \r\n    resetArray() {\r\n        const array = []\r\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\r\n            // array.push(200 + 10 * i); //pushing sorted increasing array\r\n            // array.push(500 - 5 * i); //pushing sorted decreasing array\r\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-150)); //random array\r\n        }\r\n        this.setState({array: array});\r\n        this.restoreStoreButtons();\r\n    }\r\n    disableSortButtons() {\r\n        document.getElementById(\"mergeSort\").disabled = true;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#44A08D\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#44A08D\";\r\n\r\n        document.getElementById(\"insertionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#44A08D\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#44A08D\";\r\n\r\n        document.getElementById(\"bubbleSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#44A08D\";\r\n    }\r\n    restoreStoreButtons() {\r\n        document.getElementById(\"mergeSort\").disabled = false;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\r\n        buttonStyle.background = \"#44A08D\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#44A08D\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"bubbleSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#44A08D\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#44A08D\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"insertionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#44A08D\";\r\n        buttonStyle.cursor = \"pointer\";\r\n    }\r\n    //Sorting Algorithms\r\n    mergeSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n                \r\n            }\r\n            else {\r\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    \r\n                    barOneStyle.height = `${newHeight}px`;\r\n                  },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    quickSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 5000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n    }\r\n    bubbleSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n    }\r\n    insertionSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    selectionSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    render() {\r\n        const array = this.state.array;\r\n        const SORT_BUTTONS = 6;\r\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\r\n        return(\r\n            <>\r\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                        backgroundColor: PRIMARY_COLOR,\r\n                        height: `${value}px`\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n            <div className=\"container-fluid\">\r\n            <div className=\"buttons text-center\" > \r\n                <button className=\"generate\" title=\"Generates a new random array\"  onClick={() => this.resetArray()}>\r\n                    Rearrange Array\r\n                </button>\r\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\"  onClick={() => this.mergeSort()}>\r\n                    Merge Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\"  onClick={() => this.quickSort()}>\r\n                    Quick Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\"  onClick={() => this.bubbleSort()}>\r\n                    Bubble Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\"  onClick={() => this.insertionSort()}>\r\n                    Insertion Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\"  onClick={() => this.selectionSort()}>\r\n                    Selection Sort\r\n                </button>\r\n                <div className=\"algoo\" >\r\n                <lottie-player src=\"https://assets2.lottiefiles.com/private_files/lf30_ovEPsq.json\"  background=\"transparent\"  speed=\"2\"   loop  autoplay></lottie-player>\r\n            </div>\r\n            </div>  \r\n            {/* <img src={algo} alt=\"algo\" className=\"algo\"></img>   */}\r\n            \r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n\r\n\r\n","export function getInsertionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <SortingVisualizer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}